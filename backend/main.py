import asyncio
import logging
import os
import json

from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from dotenv import load_dotenv

from sqlalchemy import String, BigInteger, select, ForeignKey
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker

from aiohttp import web # –ù–æ–≤–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO)
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö ---
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å DATABASE_URL")

ASYNC_DATABASE_URL = DATABASE_URL.replace("postgresql://", "postgresql+asyncpg://")
engine = create_async_engine(ASYNC_DATABASE_URL, echo=True)
async_sessionmaker = async_sessionmaker(engine, expire_on_commit=False)

class Base(DeclarativeBase):
    pass

class User(Base):
    __tablename__ = "users"
    id: Mapped[int] = mapped_column(primary_key=True)
    telegram_id: Mapped[int] = mapped_column(BigInteger, unique=True, nullable=False)
    full_name: Mapped[str] = mapped_column(String(150), nullable=True)
    deals: Mapped[list["Deal"]] = relationship(back_populates="agent")

# –ù–û–í–ê–Ø –ú–û–î–ï–õ–¨ –°–î–ï–õ–ö–ò
class Deal(Base):
    __tablename__ = "deals"
    id: Mapped[int] = mapped_column(primary_key=True)
    client_name: Mapped[str] = mapped_column(String(150))
    status: Mapped[str] = mapped_column(String(50))
    agent_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    agent: Mapped["User"] = relationship(back_populates="deals")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–æ—Ç–∞ ---
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# --- API Endpoint (–í–µ–±-—Å–µ—Ä–≤–µ—Ä) ---
async def get_deals(request):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—Ä–æ—Å–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫.
    """
    # TODO: –í –±—É–¥—É—â–µ–º –º—ã –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å telegram_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏
    # –ê –ø–æ–∫–∞ –æ—Ç–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    deals_data = [
        {"id": 1, "client_name": "–û–û–û –†–æ–º–∞—à–∫–∞", "status": "–ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"},
        {"id": 2, "client_name": "–ò–ü –í–∞—Å–∏–ª—å–µ–≤", "status": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è"},
        {"id": 3, "client_name": "John Doe", "status": "–ö–ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"},
    ]
    return web.Response(text=json.dumps(deals_data), content_type='application/json', headers={"Access-Control-Allow-Origin": "*"})

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ë–æ—Ç–∞ ---
@dp.message(CommandStart())
async def handle_start(message: Message):
    # –ö–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞ –º–µ—Å—Ç–µ
    webapp_url = os.getenv("VERCEL_URL", "https.t.me")
    start_button = InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=webapp_url))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[start_button]])

    async with async_sessionmaker() as session:
        # ... (–∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        if user is None:
            new_user = User(telegram_id=message.from_user.id, full_name=message.from_user.full_name)
            session.add(new_user)
            await session.commit()
            greeting_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {new_user.full_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
        else:
            greeting_text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}!"
    await message.answer(greeting_text, reply_markup=keyboard)

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ ---
async def create_db_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

async def start_bot():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

async def start_api_server():
    app = web.Application()
    app.router.add_get("/api/deals", get_deals)
    runner = web.AppRunner(app)
    await runner.setup()
    # Railway –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –ø–æ—Ä—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
    site = web.TCPSite(runner, '0.0.0.0', int(os.getenv('PORT', 8080)))
    await site.start()
    logging.info("API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    # –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—á–Ω–æ, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞
    await asyncio.Event().wait()

async def main():
    await create_db_tables()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ API —Å–µ—Ä–≤–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(
        start_bot(),
        start_api_server()
    )

if __name__ == "__main__":
    asyncio.run(main())
